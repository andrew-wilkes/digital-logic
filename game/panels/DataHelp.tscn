[gd_scene load_steps=3 format=2]

[ext_resource path="res://assets/fonts/m_bold.tres" type="DynamicFont" id=1]
[ext_resource path="res://assets/fonts/mono-font.tres" type="DynamicFont" id=2]

[node name="DataHelp" type="MarginContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = 10.0
margin_bottom = 10.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Notes" type="RichTextLabel" parent="."]
margin_right = 1280.0
margin_bottom = 800.0
custom_fonts/mono_font = ExtResource( 2 )
custom_fonts/bold_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "[b]Memory Viewer[/b]

This displays the content of the memory in a grid. Each value is in hexadecimal code.

Address zero is in the top left, and each row of data is comprised of 16 bytes.

The top row shows the least significant byte of the address, and the left column shows the most significant byte of the address.

On the right side is a display of printable characters that the data represents.

[b]Disassembler[/b]

The left column shows each memory address.

The next column is the data value stored at that address. And, if it is part of the compiled code, then the corresponding line of code or label is shown. Clicking on the value either takes us to the Assembler panel, or we get a popup to edit the value as a decimal integer.

[b]Assembler[/b]

Here we may load, save, edit, and compile programs in the SUBLEQ language.

Each line of code compiles to 3 bytes of machine code.
The single operation is: [B] = [B] - [A] where [A] means the value stored at A
If the result is less than or equal to zero then the program counter jumps to location C or else to the next line of code.
If no C value is specified, then the program counter jumps to the next line of code.

Comment lines start with a # character.

The formats of lines of code are:
 [code]#COMMENT LINE
[LABEL]:INTEGER [# COMMENT]
[LABEL]:A,B [# COMMENT]
[LABEL] : A B [# COMMENT]
[LABEL] : A,B,C [# COMMENT]
[LABEL] : A B C [# COMMENT][/code]
[LABEL] : \"string\"

where optional items are in brackets.
Integers may range from -128 through zero to 255.
A, B, C, and LABEL are labels that reference memory locations.
Add + characters to reference the bytes ahead of the label position e.g. label++ for the address 2 bytes ahead.

Example: [code]
# Add a to b
start: a b cont
a : -4 # Use a negative number
b : 6
cont : 0 [/code]
"
text = "Memory Viewer

This displays the content of the memory in a grid. Each value is in hexadecimal code.

Address zero is in the top left, and each row of data is comprised of 16 bytes.

The top row shows the least significant byte of the address, and the left column shows the most significant byte of the address.

On the right side is a display of printable characters that the data represents.

Disassembler

The left column shows each memory address.

The next column is the data value stored at that address. And, if it is part of the compiled code, then the corresponding line of code or label is shown. Clicking on the value either takes us to the Assembler panel, or we get a popup to edit the value as a decimal integer.

Assembler

Here we may load, save, edit, and compile programs in the SUBLEQ language.

Each line of code compiles to 3 bytes of machine code.
The single operation is: [B] = [B] - [A] where [A] means the value stored at A
If the result is less than or equal to zero then the program counter jumps to location C or else to the next line of code.
If no C value is specified, then the program counter jumps to the next line of code.

Comment lines start with a # character.

The formats of lines of code are:
 #COMMENT LINE
[LABEL]:INTEGER [# COMMENT]
[LABEL]:A,B [# COMMENT]
[LABEL] : A B [# COMMENT]
[LABEL] : A,B,C [# COMMENT]
[LABEL] : A B C [# COMMENT]
[LABEL] : \"string\"

where optional items are in brackets.
Integers may range from -128 through zero to 255.
A, B, C, and LABEL are labels that reference memory locations.
Add + characters to reference the bytes ahead of the label position e.g. label++ for the address 2 bytes ahead.

Example: 
# Add a to b
start: a b cont
a : -4 # Use a negative number
b : 6
cont : 0 
"
